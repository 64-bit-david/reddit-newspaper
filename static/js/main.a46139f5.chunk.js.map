{"version":3,"sources":["actions/types.js","apis/fetchReddit.js","components/Weather.js","components/Date.js","components/subredditList.js","components/SubredditSelector.js","actions/index.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/articlesReducer.js","reducers/subredditReducer.js","index.js"],"names":["FETCH_POSTS","FETCH_COMMENTS","SET_SUBREDDIT","REMOVE_ARTICLES","axios","create","baseURL","Weather","CurrentDate","today","Date","dd","String","getDay","dofm","getDate","mm","getMonth","yyyy","getFullYear","dateFormatter","connect","subreddit","selectSubreddit","subredditClicked","type","payload","clickState","setClickState","className","subRedditList","map","item","index","onClick","posts","articles","fetchPosts","dispatch","a","fetchReddit","get","res","postsArray","data","children","postsWithstickiedRemoved","filter","post","stickied","slice","fetchComments","postId","getState","comments","commentsWithStickedRemoved","comment","author_flair_text","body","article","articleTitle","title","articleComments","articleMeta","removeArticles","useState","loading","setLoading","useEffect","length","getPosts","id","listener","e","key","window","addEventListener","removeEventListener","alterLongComment","href","permalink","icon","faChevronDown","color","height","timeout","author","renderArticles","combineReducers","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.a46139f5.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const FETCH_COMMENTS = 'FETCH_COMMENTS';\r\nexport const SET_SUBREDDIT = 'SET_SUBREDDIT';\r\nexport const REMOVE_ARTICLES = 'REMOVE_ARTICLES';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://www.reddit.com'\r\n})","// import React, { useEffect, useState } from 'react'\r\n// import weather from 'openweather-apis';\r\n\r\nconst Weather = () => {\r\n\r\n  // const [currentTemp, setCurrentTemp] = useState(null);\r\n  // const [currentForecast, setCurrentForecast] = useState(null);\r\n\r\n\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n\r\n\r\n  //   const setWeather = async () => {\r\n  //     try {\r\n  //       await weather.setAPPID(process.env.REACT_APP_WEATHER_API_KEY);\r\n  //       await weather.setCityId(2643743);\r\n  //       await weather.setUnits('metric');\r\n  //       await weather.setLang('en');\r\n  //       weather.getTemperature(async (err, temp) => {\r\n  //         await setCurrentTemp(Math.round(temp));\r\n  //       })\r\n  //       weather.getDescription(async (err, desc) => {\r\n  //         await setCurrentForecast(desc);\r\n  //       })\r\n  //     } catch (err) {\r\n  //       if (err) console.log(err);\r\n  //     }\r\n  //   }\r\n\r\n  // setWeather();\r\n\r\n  // }, [])\r\n\r\n\r\n\r\n\r\n  // return <p>{currentForecast ? `London UK ${currentTemp}Â°C ${currentForecast}` : `London UK`}</p>;\r\n\r\n  return <p>London UK</p>;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Weather;\r\n\r\n","import React from 'react'\r\n\r\nconst CurrentDate = () => {\r\n\r\n  const dateFormatter = () => {\r\n\r\n    const today = new Date();\r\n    const dd = String(today.getDay());\r\n    const dofm = String(today.getDate());\r\n    const mm = String(today.getMonth());\r\n    const yyyy = today.getFullYear();\r\n\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n    const daysOfMonth = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\r\n\r\n    const date = `${days[dd]} ${months[mm]} ${daysOfMonth[dofm]} ${yyyy}`\r\n\r\n    return date;\r\n  }\r\n\r\n\r\n  return (\r\n    <p>\r\n      {dateFormatter()}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CurrentDate;\r\n","\r\nexport default ['worldnews', 'news', 'upliftingnews', 'askreddit', 'politics', 'nottheonion', 'ukpolitics', 'technology', 'science', 'futurology']\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport subRedditList from './subredditList';\r\nimport { selectSubreddit } from '../actions';\r\n\r\nconst SubredditSelector = ({ clickState, setClickState, selectSubreddit }) => {\r\n\r\n  const renderSubReddits = () => {\r\n    return (\r\n      <nav className=\"s-list-container\">\r\n        <h4>Select a subreddit</h4>\r\n        <ul className=\"subreddit-list\">{subRedditList.map((item, index) => {\r\n          return (\r\n            <li key={item}>\r\n              <button onClick={() => {\r\n                selectSubreddit(index)\r\n                setClickState(!clickState)\r\n              }\r\n              }>\r\n                /r/{item}\r\n              </button>\r\n            </li>\r\n          )\r\n        })\r\n        }\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`subreddit-list-container ${clickState && 'active'}`}>\r\n      {renderSubReddits()}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ subreddit }) => {\r\n  return ({ subreddit })\r\n}\r\n\r\nexport default connect(mapStateToProps, { selectSubreddit })(SubredditSelector)\r\n","import { FETCH_POSTS, FETCH_COMMENTS, SET_SUBREDDIT, REMOVE_ARTICLES } from \"./types\";\r\nimport fetchReddit from '../apis/fetchReddit';\r\n\r\nexport const fetchPosts = (subreddit) => async (dispatch) => {\r\n  const res = await fetchReddit.get(`/r/${subreddit}.json`);\r\n  const postsArray = res.data.data.children;\r\n  //filter out any stickied posts in array\r\n  const postsWithstickiedRemoved = postsArray.filter(post => !post.data.stickied);\r\n  dispatch({ type: FETCH_POSTS, payload: postsWithstickiedRemoved.slice(0, 21) })\r\n}\r\n\r\nexport const fetchComments = (postId, post) => async (dispatch, getState) => {\r\n  const res = await fetchReddit.get(postId);\r\n  const comments = res.data[1].data.children;\r\n  const commentsWithStickedRemoved = comments.filter(comment => {\r\n    return (!comment.data.stickied && comment.data.author_flair_text !== \"BOT\" && comment.data.body !== \"[removed]\");\r\n  })\r\n  const article = { articleTitle: post.data.title, articleComments: [commentsWithStickedRemoved.slice(0, 2)], articleMeta: post }\r\n\r\n  dispatch({ type: FETCH_COMMENTS, payload: article })\r\n}\r\n\r\nexport const removeArticles = () => {\r\n  return { type: REMOVE_ARTICLES }\r\n}\r\n\r\nexport const selectSubreddit = (subredditClicked) => {\r\n  const subredditList = ['worldnews', 'news', 'upliftingnews', 'askreddit', 'politics', 'nottheonion', 'ukpolitics', 'technology', 'science', 'futurology',];\r\n  return { type: SET_SUBREDDIT, payload: subredditList[subredditClicked] }\r\n}","import { useEffect, useState } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts, fetchComments, removeArticles } from '../actions';\r\nimport Weather from './Weather';\r\nimport CurrentDate from './Date';\r\nimport SubredditSelector from './SubredditSelector';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nconst App = ({ subreddit, fetchPosts, posts, fetchComments, articles, removeArticles }) => {\r\n\r\n  const [clickState, setClickState] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (articles.length > 10) {\r\n      setLoading(false)\r\n    }\r\n    else {\r\n      setLoading(true)\r\n    }\r\n  }, [articles, setLoading])\r\n\r\n  useEffect(() => {\r\n    removeArticles();\r\n    const getPosts = async () => {\r\n      await fetchPosts(subreddit);\r\n    }\r\n    getPosts();\r\n  }, [subreddit, fetchPosts, removeArticles, setLoading]);\r\n\r\n  //once posts are fetched, using id to fetch each post's comments\r\n  useEffect(() => {\r\n    const commentsList = () => {\r\n      posts.map(post => {\r\n        return fetchComments(`/${post.data.id}.json`, post);\r\n      })\r\n    }\r\n    commentsList();\r\n  }, [posts, fetchComments])\r\n\r\n  //lister for escape keydown to remove subreddit component state\r\n  useEffect(() => {\r\n    const listener = (e) => {\r\n      if (e.key === 'Escape') {\r\n        setClickState(false);\r\n      }\r\n    }\r\n    window.addEventListener('keydown', listener);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', listener);\r\n    }\r\n  })\r\n\r\n\r\n\r\n  //get comment meta data, returns comment text\r\n  //if comment exceeds 200chars, only return first 200 + option to read full text on reddit\r\n  const alterLongComment = (comment, index) => {\r\n    if (comment.body.length < 200) return comment.body;\r\n    if (comment.body.length > 200) {\r\n      return (\r\n        <div>\r\n          {comment.body.slice(0, 200)}...<br />\r\n          <a href={`https://www.reddit.com${comment.permalink}`} className=\"reddit-comment-link\">\r\n            Continue on reddit\r\n          </a>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // renders posts and comments held in articles' state\r\n  const renderArticles = () => {\r\n    if (articles.length > 0) {\r\n      return articles.map((article, index) => {\r\n        return (\r\n          <section\r\n            //long-header class will slighly decrease font size\r\n            className={`grid-item\r\n             ${(article.articleTitle.length > 80 && index > 1) ? 'long-header' : ''} `}\r\n            key={article.articleMeta.data.id}\r\n          >\r\n            <h2 className=\"grid-item-header\">\r\n              <a className=\"header-link\" href={`https://www.reddit.com${article.articleMeta.data.permalink}`}>\r\n                {article.articleTitle}\r\n              </a>\r\n            </h2>\r\n            <div>\r\n              {/*  Need to check if comments exists  */}\r\n              <ul>\r\n                {article['articleComments'][0][0] ?\r\n                  <li>\r\n                    <span className=\"author-line\">User:\r\n                  {/* get comment username */}\r\n                      <span className=\"author-name\"> {article['articleComments'][0][0].data.author}</span> says </span><br />\r\n                    {/* Get comment meta */}\r\n                    {alterLongComment(article['articleComments'][0][0].data)}\r\n                  </li> :\r\n                  <li> No Comments Yet!</li>}\r\n                {/* Check if second comment exits */}\r\n                {article['articleComments'][0][1] ?\r\n                  <li>\r\n                    <span className=\"author-line\">User:\r\n                   <span className=\"author-name\">{article['articleComments'][0][1].data.author}</span> says </span> <br />\r\n                    {alterLongComment(article['articleComments'][0][1].data)}\r\n                  </li> : null}\r\n              </ul>\r\n            </div>\r\n          </section>\r\n\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  const renderLoader = () => {\r\n    return (\r\n      <div className=\"loader-container\">\r\n        <Loader type=\"Grid\" color=\"rgb(44,44,44)\" height={150}\r\n          timeout={5000}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <header className=\"header-container\">\r\n        <div className=\"header-left\">\r\n          <button\r\n            onClick={() => setClickState(!clickState)}\r\n          >/r/{subreddit}\r\n            <span className=\"btn-symbol\">\r\n              <FontAwesomeIcon icon={faChevronDown} />\r\n            </span>\r\n          </button>\r\n          <SubredditSelector\r\n            clickState={clickState}\r\n            setClickState={setClickState}\r\n          />\r\n        </div>\r\n        <div className='header-center'>\r\n          <h1>The Reddit Daily</h1>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          <h4>LATEST <br /> EDITION</h4>\r\n        </div>\r\n      </header>\r\n\r\n      <div className='sub-header'>\r\n        <div className=\"weather\">\r\n          <Weather />\r\n        </div>\r\n        <div className=\"date\">\r\n          <CurrentDate />\r\n        </div>\r\n      </div>\r\n\r\n      <main className='main-grid'>\r\n        {loading ? renderLoader() : renderArticles()}\r\n      </main>\r\n      <footer className=\"footer-container\">\r\n        <a href=\"https://david-w.dev\">Created By David Williamson</a>\r\n      </footer>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({ subreddit, posts, articles }) => {\r\n  return { subreddit, posts, articles }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchPosts, fetchComments, removeArticles })(App)\r\n","import { combineReducers } from 'redux';\r\nimport articlesReducer from './articlesReducer';\r\nimport postsReducer from './postsReducer';\r\nimport subredditReducer from './subredditReducer';\r\n\r\nexport default combineReducers({\r\n  posts: postsReducer,\r\n  articles: articlesReducer,\r\n  subreddit: subredditReducer\r\n})","import { FETCH_POSTS } from '../actions/types';\r\n\r\nexport default function func(state = [], action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { FETCH_COMMENTS, REMOVE_ARTICLES } from '../actions/types';\r\n\r\nexport default function func(state = [], action) {\r\n  switch (action.type) {\r\n    case FETCH_COMMENTS:\r\n      return [...state, action.payload];\r\n    case REMOVE_ARTICLES:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_SUBREDDIT } from '../actions/types';\r\n\r\n\r\nexport default function func(state = 'worldnews', action) {\r\n  switch (action.type) {\r\n    case SET_SUBREDDIT:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","import './index.css';\r\nimport ReactDom from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.querySelector('#root')\r\n)"],"sourceRoot":""}